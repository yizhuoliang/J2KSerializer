// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: J2KResultsHub.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResultsHubClient is the client API for ResultsHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultsHubClient interface {
	// NOTE: for those rpcs, if the call fails, the pod should retry,
	// the call will eventually success when ResultsHub recovers
	ClaimCellFinished(ctx context.Context, in *VarResults, opts ...grpc.CallOption) (*Empty, error)
	FetchVarResult(ctx context.Context, in *FetchVarResultRequest, opts ...grpc.CallOption) (*VarResult, error)
	// for synchronization between the cells, currently used for files RWs
	WaitForCell(ctx context.Context, in *WaitCellRequest, opts ...grpc.CallOption) (*Empty, error)
	// for stream processing
	SubmitRecursiveVars(ctx context.Context, in *VarResults, opts ...grpc.CallOption) (*Empty, error)
	// The Ping-Pong service for cluster testing, remove in future
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type resultsHubClient struct {
	cc grpc.ClientConnInterface
}

func NewResultsHubClient(cc grpc.ClientConnInterface) ResultsHubClient {
	return &resultsHubClient{cc}
}

func (c *resultsHubClient) ClaimCellFinished(ctx context.Context, in *VarResults, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/J2KResultsHub.ResultsHub/ClaimCellFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsHubClient) FetchVarResult(ctx context.Context, in *FetchVarResultRequest, opts ...grpc.CallOption) (*VarResult, error) {
	out := new(VarResult)
	err := c.cc.Invoke(ctx, "/J2KResultsHub.ResultsHub/FetchVarResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsHubClient) WaitForCell(ctx context.Context, in *WaitCellRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/J2KResultsHub.ResultsHub/WaitForCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsHubClient) SubmitRecursiveVars(ctx context.Context, in *VarResults, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/J2KResultsHub.ResultsHub/SubmitRecursiveVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsHubClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/J2KResultsHub.ResultsHub/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultsHubServer is the server API for ResultsHub service.
// All implementations must embed UnimplementedResultsHubServer
// for forward compatibility
type ResultsHubServer interface {
	// NOTE: for those rpcs, if the call fails, the pod should retry,
	// the call will eventually success when ResultsHub recovers
	ClaimCellFinished(context.Context, *VarResults) (*Empty, error)
	FetchVarResult(context.Context, *FetchVarResultRequest) (*VarResult, error)
	// for synchronization between the cells, currently used for files RWs
	WaitForCell(context.Context, *WaitCellRequest) (*Empty, error)
	// for stream processing
	SubmitRecursiveVars(context.Context, *VarResults) (*Empty, error)
	// The Ping-Pong service for cluster testing, remove in future
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedResultsHubServer()
}

// UnimplementedResultsHubServer must be embedded to have forward compatible implementations.
type UnimplementedResultsHubServer struct {
}

func (UnimplementedResultsHubServer) ClaimCellFinished(context.Context, *VarResults) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCellFinished not implemented")
}
func (UnimplementedResultsHubServer) FetchVarResult(context.Context, *FetchVarResultRequest) (*VarResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVarResult not implemented")
}
func (UnimplementedResultsHubServer) WaitForCell(context.Context, *WaitCellRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForCell not implemented")
}
func (UnimplementedResultsHubServer) SubmitRecursiveVars(context.Context, *VarResults) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRecursiveVars not implemented")
}
func (UnimplementedResultsHubServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedResultsHubServer) mustEmbedUnimplementedResultsHubServer() {}

// UnsafeResultsHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultsHubServer will
// result in compilation errors.
type UnsafeResultsHubServer interface {
	mustEmbedUnimplementedResultsHubServer()
}

func RegisterResultsHubServer(s grpc.ServiceRegistrar, srv ResultsHubServer) {
	s.RegisterService(&ResultsHub_ServiceDesc, srv)
}

func _ResultsHub_ClaimCellFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VarResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsHubServer).ClaimCellFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/J2KResultsHub.ResultsHub/ClaimCellFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsHubServer).ClaimCellFinished(ctx, req.(*VarResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsHub_FetchVarResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVarResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsHubServer).FetchVarResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/J2KResultsHub.ResultsHub/FetchVarResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsHubServer).FetchVarResult(ctx, req.(*FetchVarResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsHub_WaitForCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsHubServer).WaitForCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/J2KResultsHub.ResultsHub/WaitForCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsHubServer).WaitForCell(ctx, req.(*WaitCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsHub_SubmitRecursiveVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VarResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsHubServer).SubmitRecursiveVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/J2KResultsHub.ResultsHub/SubmitRecursiveVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsHubServer).SubmitRecursiveVars(ctx, req.(*VarResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsHub_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsHubServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/J2KResultsHub.ResultsHub/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsHubServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResultsHub_ServiceDesc is the grpc.ServiceDesc for ResultsHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultsHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "J2KResultsHub.ResultsHub",
	HandlerType: (*ResultsHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimCellFinished",
			Handler:    _ResultsHub_ClaimCellFinished_Handler,
		},
		{
			MethodName: "FetchVarResult",
			Handler:    _ResultsHub_FetchVarResult_Handler,
		},
		{
			MethodName: "WaitForCell",
			Handler:    _ResultsHub_WaitForCell_Handler,
		},
		{
			MethodName: "SubmitRecursiveVars",
			Handler:    _ResultsHub_SubmitRecursiveVars_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _ResultsHub_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "J2KResultsHub.proto",
}
